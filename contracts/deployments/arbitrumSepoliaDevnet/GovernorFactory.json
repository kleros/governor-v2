{
  "address": "0x48C3ab79b8Ee41fc4928CC52D935ea006d4a9c58",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract KlerosGovernor",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "NewGovernor",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "contract IDisputeTemplateRegistry",
          "name": "_templateRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_templateData",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_templateDataMappings",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_submissionBaseDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_submissionTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_executionTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawTimeout",
          "type": "uint256"
        }
      ],
      "name": "deploy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "instances",
      "outputs": [
        {
          "internalType": "contract KlerosGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7d52fd92834e586e1eecaad0f7e6ceab729df743e0ed97ee459efd3bb0cc211",
  "receipt": {
    "to": null,
    "from": "0x88AB19C0c7b57EeBa545acbD4368748194cd796B",
    "contractAddress": "0x48C3ab79b8Ee41fc4928CC52D935ea006d4a9c58",
    "transactionIndex": 1,
    "gasUsed": "2613569",
    "logsBloom": "0x
    "blockHash": "0x070623be061ad36c096214e2e141fc8ba1d31c281b9f594fecb3a42e51cac94c",
    "transactionHash": "0xf7d52fd92834e586e1eecaad0f7e6ceab729df743e0ed97ee459efd3bb0cc211",
    "logs": [],
    "blockNumber": 124645813,
    "cumulativeGasUsed": "2613569",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f58fe0059d32b94f511cdf4ce9dbb09c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract KlerosGovernor\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewGovernor\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"contract IDisputeTemplateRegistry\",\"name\":\"_templateRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_templateData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_templateDataMappings\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_submissionBaseDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_submissionTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawTimeout\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"contract KlerosGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"NewGovernor(address)\":{\"details\":\"Emitted when a new Governor contract is deployed using this factory.\",\"params\":{\"_address\":\"The address of the newly deployed Governor contract.\"}}},\"kind\":\"dev\",\"methods\":{\"deploy(address,bytes,address,string,string,uint256,uint256,uint256,uint256)\":{\"details\":\"Deploy the arbitrable kleros.\",\"params\":{\"_arbitrator\":\"The arbitrator of the contract.\",\"_arbitratorExtraData\":\"Extra data for the arbitrator.\",\"_executionTimeout\":\"Time in seconds after approval that allows to execute transactions of the approved list.\",\"_submissionBaseDeposit\":\"The base deposit required for submission.\",\"_submissionTimeout\":\"Time in seconds allocated for submitting transaction list.\",\"_templateData\":\"The dispute template data.\",\"_templateDataMappings\":\"The dispute template data mappings.\",\"_templateRegistry\":\"Dispute Template registry address\",\"_withdrawTimeout\":\"Time in seconds after submission that allows to withdraw submitted list.\"}}},\"title\":\"GovernorFactory This contract acts as a registry for KlerosGovernor instances.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/GovernorFactory.sol\":\"GovernorFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitrableV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"./IArbitratorV2.sol\\\";\\n\\n/// @title IArbitrableV2\\n/// @notice Arbitrable interface.\\n/// @dev When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\ninterface IArbitrableV2 {\\n    /// @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitratorDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _externalDisputeID An identifier created outside Kleros by the protocol requesting arbitration.\\n    /// @param _templateId The identifier of the dispute template. Should not be used with _templateUri.\\n    /// @param _templateUri The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId.\\n    event DisputeRequest(\\n        IArbitratorV2 indexed _arbitrator,\\n        uint256 indexed _arbitratorDisputeID,\\n        uint256 _externalDisputeID,\\n        uint256 _templateId,\\n        string _templateUri\\n    );\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitratorV2 indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Give a ruling for a dispute.\\n    ///      Must be called by the arbitrator.\\n    ///      The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator.\\n    /// Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0xe841a4fe8ec109ce17dde4457bf1583c8b499109b05887c53a49a3207fc6e80b\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IArbitrableV2.sol\\\";\\n\\n/// @title Arbitrator\\n/// Arbitrator interface that implements the new arbitration standard.\\n/// Unlike the ERC-792 this standard is not concerned with appeals, so each arbitrator can implement an appeal system that suits it the most.\\n/// When developing arbitrator contracts we need to:\\n/// - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n/// - Define the functions for cost display (arbitrationCost).\\n/// - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\ninterface IArbitratorV2 {\\n    /// @dev To be emitted when a dispute is created.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrableV2 indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev To be emitted when an ERC20 token is added or removed as a method to pay fees.\\n    /// @param _token The ERC20 token.\\n    /// @param _accepted Whether the token is accepted or not.\\n    event AcceptedFeeToken(IERC20 indexed _token, bool indexed _accepted);\\n\\n    /// @dev To be emitted when the fee for a particular ERC20 token is updated.\\n    /// @param _feeToken The ERC20 token.\\n    /// @param _rateInEth The new rate of the fee token in ETH.\\n    /// @param _rateDecimals The new decimals of the fee token rate.\\n    event NewCurrencyRate(IERC20 indexed _feeToken, uint64 _rateInEth, uint8 _rateDecimals);\\n\\n    /// @dev Create a dispute and pay for the fees in the native currency, typically ETH.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData\\n    ) external payable returns (uint256 disputeID);\\n\\n    /// @dev Create a dispute and pay for the fees in a supported ERC20 token.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @param _feeAmount Amount of the ERC20 token used to pay fees.\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        IERC20 _feeToken,\\n        uint256 _feeAmount\\n    ) external returns (uint256 disputeID);\\n\\n    /// @dev Compute the cost of arbitration denominated in the native currency, typically ETH.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return cost The arbitration cost in ETH.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /// @dev Compute the cost of arbitration denominated in `_feeToken`.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @return cost The arbitration cost in `_feeToken`.\\n    function arbitrationCost(bytes calldata _extraData, IERC20 _feeToken) external view returns (uint256 cost);\\n\\n    /// @dev Gets the current ruling of a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return ruling The current ruling.\\n    /// @return tied Whether it's a tie or not.\\n    /// @return overridden Whether the ruling was overridden by appeal funding or not.\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling, bool tied, bool overridden);\\n}\\n\",\"keccak256\":\"0xa4dc6b958197adead238de4246cd04e7389c3dc1b9f968acd10985f8fc5b74cf\",\"license\":\"MIT\"},\"@kleros/kleros-v2-contracts/arbitration/interfaces/IDisputeTemplateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\n/// @title IDisputeTemplate\\n/// @notice Dispute Template interface.\\ninterface IDisputeTemplateRegistry {\\n    /// @dev To be emitted when a new dispute template is created.\\n    /// @param _templateId The identifier of the dispute template.\\n    /// @param _templateTag An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\\n    /// @param _templateData The template data.\\n    /// @param _templateDataMappings The data mappings.\\n    event DisputeTemplate(\\n        uint256 indexed _templateId,\\n        string indexed _templateTag,\\n        string _templateData,\\n        string _templateDataMappings\\n    );\\n\\n    function setDisputeTemplate(\\n        string memory _templateTag,\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external returns (uint256 templateId);\\n}\\n\",\"keccak256\":\"0xb46ff71c32a524a865fe8ca99d94c9daeb690bc9d7d49d963a45b06f60af19f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"src/GovernorFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport {IArbitratorV2} from \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitrableV2.sol\\\";\\nimport \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IDisputeTemplateRegistry.sol\\\";\\nimport {KlerosGovernor} from \\\"./KlerosGovernor.sol\\\";\\n\\n/// @title GovernorFactory\\n/// This contract acts as a registry for KlerosGovernor instances.\\ncontract GovernorFactory {\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Emitted when a new Governor contract is deployed using this factory.\\n    /// @param _address The address of the newly deployed Governor contract.\\n    event NewGovernor(KlerosGovernor indexed _address);\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    KlerosGovernor[] public instances;\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Deploy the arbitrable kleros.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitratorExtraData Extra data for the arbitrator.\\n    /// @param _templateRegistry  Dispute Template registry address\\n    /// @param _templateData The dispute template data.\\n    /// @param _templateDataMappings The dispute template data mappings.\\n    /// @param _submissionBaseDeposit The base deposit required for submission.\\n    /// @param _submissionTimeout Time in seconds allocated for submitting transaction list.\\n    /// @param _executionTimeout Time in seconds after approval that allows to execute transactions of the approved list.\\n    /// @param _withdrawTimeout Time in seconds after submission that allows to withdraw submitted list.\\n    function deploy(\\n        IArbitratorV2 _arbitrator,\\n        bytes memory _arbitratorExtraData,\\n        IDisputeTemplateRegistry _templateRegistry,\\n        string memory _templateData,\\n        string memory _templateDataMappings,\\n        uint256 _submissionBaseDeposit,\\n        uint256 _submissionTimeout,\\n        uint256 _executionTimeout,\\n        uint256 _withdrawTimeout\\n    ) public {\\n        KlerosGovernor instance = new KlerosGovernor(\\n            _arbitrator,\\n            _arbitratorExtraData,\\n            _templateRegistry,\\n            _templateData,\\n            _templateDataMappings,\\n            _submissionBaseDeposit,\\n            _submissionTimeout,\\n            _executionTimeout,\\n            _withdrawTimeout\\n        );\\n        instances.push(instance);\\n        emit NewGovernor(instance);\\n    }\\n}\\n\",\"keccak256\":\"0x2f57b4873a7e3887f0f1d3eab80ff627ca2a341b3fc7fd752d0f61e44e5b24cf\",\"license\":\"MIT\"},\"src/KlerosGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.24;\\n\\nimport {IArbitrableV2, IArbitratorV2} from \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IArbitrableV2.sol\\\";\\nimport \\\"@kleros/kleros-v2-contracts/arbitration/interfaces/IDisputeTemplateRegistry.sol\\\";\\n\\n/// @title KlerosGovernor for V2. Note that appeal functionality and evidence submission will be handled by the court.\\ncontract KlerosGovernor is IArbitrableV2 {\\n    // ************************************* //\\n    // *         Enums / Structs           * //\\n    // ************************************* //\\n\\n    enum Status {\\n        NoDispute,\\n        DisputeCreated,\\n        Resolved\\n    }\\n\\n    struct Session {\\n        uint256 ruling; // The ruling that was given in this session, if any.\\n        uint256 disputeID; // ID given to the dispute of the session, if any.\\n        uint256[] submittedLists; // Tracks all lists that were submitted in a session in the form submittedLists[submissionID].\\n        uint256 sumDeposit; // Sum of all submission deposits in a session (minus arbitration fees). This is used to calculate the reward.\\n        Status status; // Status of a session.\\n        mapping(bytes32 listHash => bool) alreadySubmitted; // Indicates whether or not the transaction list was already submitted in order to catch duplicates in the form alreadySubmitted[listHash].\\n        uint256 durationOffset; // Time in seconds that prolongs the submission period after the first submission, to give other submitters time to react.\\n    }\\n\\n    struct Transaction {\\n        address target; // The address to call.\\n        uint256 value; // Value paid by governor contract that will be used as msg.value in the execution.\\n        bytes data; // Calldata of the transaction.\\n        bool executed; // Whether the transaction was already executed or not.\\n    }\\n\\n    struct Submission {\\n        address payable submitter; // The one who submits the list.\\n        uint256 deposit; // Value of the deposit paid upon submission of the list.\\n        Transaction[] txs; // Transactions stored in the list in the form txs[_transactionIndex].\\n        bytes32 listHash; // A hash chain of all transactions stored in the list. This is used as a unique identifier within a session.\\n        uint256 submissionTime; // The time when the list was submitted.\\n        bool approved; // Whether the list was approved for execution or not.\\n        uint256 approvalTime; // The time when the list was approved.\\n    }\\n\\n    IArbitratorV2 public arbitrator; // Arbitrator contract.\\n    bytes public arbitratorExtraData; // Extra data for arbitrator.\\n    IDisputeTemplateRegistry public templateRegistry; // The dispute template registry.\\n    uint256 public templateId; // The current dispute template identifier.\\n\\n    uint256 public submissionBaseDeposit; // The base deposit in wei that needs to be paid in order to submit the list.\\n    uint256 public submissionTimeout; // Time in seconds allowed for submitting the lists. Once it's passed the contract enters the approval period.\\n    uint256 public executionTimeout; // Time in seconds allowed for the execution of approved lists.\\n    uint256 public withdrawTimeout; // Time in seconds allowed to withdraw a submitted list.\\n\\n    uint256 public lastApprovalTime; // The time of the last approval of a transaction list.\\n    uint256 public reservedETH; // Sum of contract's submission deposits. These funds are not to be used in the execution of transactions.\\n\\n    Submission[] public submissions; // Stores all created transaction lists. submissions[_listID].\\n    Session[] public sessions; // Stores all submitting sessions. sessions[_session].\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier duringSubmissionPeriod() {\\n        uint256 offset = sessions[sessions.length - 1].durationOffset;\\n        require(block.timestamp - lastApprovalTime <= submissionTimeout + offset, \\\"Submission time has ended.\\\");\\n        _;\\n    }\\n\\n    modifier duringApprovalPeriod() {\\n        uint256 offset = sessions[sessions.length - 1].durationOffset;\\n        require(block.timestamp - lastApprovalTime > submissionTimeout + offset, \\\"Approval time not started yet.\\\");\\n        _;\\n    }\\n\\n    modifier onlyByGovernor() {\\n        require(address(this) == msg.sender, \\\"Only the governor allowed.\\\");\\n        _;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @dev Emitted when a new list is submitted.\\n    /// @param _listID The index of the transaction list in the array of lists.\\n    /// @param _submitter The address that submitted the list.\\n    /// @param _session The number of the current session.\\n    /// @param _description The string in CSV format that contains labels of list's transactions.\\n    /// Note that the submitter may give bad descriptions of correct actions, but this is to be seen as UI enhancement, not a critical feature and that would play against him in case of dispute.\\n    event ListSubmitted(\\n        uint256 indexed _listID,\\n        address indexed _submitter,\\n        uint256 indexed _session,\\n        string _description\\n    );\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @dev Constructor.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitratorExtraData Extra data for the arbitrator.\\n    /// @param _templateRegistry  Dispute Template registry address\\n    /// @param _templateData The dispute template data.\\n    /// @param _templateDataMappings The dispute template data mappings.\\n    /// @param _submissionBaseDeposit The base deposit required for submission.\\n    /// @param _submissionTimeout Time in seconds allocated for submitting transaction list.\\n    /// @param _executionTimeout Time in seconds after approval that allows to execute transactions of the approved list.\\n    /// @param _withdrawTimeout Time in seconds after submission that allows to withdraw submitted list.\\n    constructor(\\n        IArbitratorV2 _arbitrator,\\n        bytes memory _arbitratorExtraData,\\n        IDisputeTemplateRegistry _templateRegistry,\\n        string memory _templateData,\\n        string memory _templateDataMappings,\\n        uint256 _submissionBaseDeposit,\\n        uint256 _submissionTimeout,\\n        uint256 _executionTimeout,\\n        uint256 _withdrawTimeout\\n    ) {\\n        arbitrator = _arbitrator;\\n        arbitratorExtraData = _arbitratorExtraData;\\n\\n        lastApprovalTime = block.timestamp;\\n        submissionBaseDeposit = _submissionBaseDeposit;\\n        submissionTimeout = _submissionTimeout;\\n        executionTimeout = _executionTimeout;\\n        withdrawTimeout = _withdrawTimeout;\\n        sessions.push();\\n\\n        templateRegistry = _templateRegistry;\\n        templateId = IDisputeTemplateRegistry(templateRegistry).setDisputeTemplate(\\n            \\\"\\\",\\n            _templateData,\\n            _templateDataMappings\\n        );\\n    }\\n\\n    // ************************************* //\\n    // *             Governance            * //\\n    // ************************************* //\\n\\n    /// @dev Changes the value of the base deposit required for submitting a list.\\n    /// @param _submissionBaseDeposit The new value of the base deposit, in wei.\\n    function changeSubmissionDeposit(uint256 _submissionBaseDeposit) external onlyByGovernor {\\n        submissionBaseDeposit = _submissionBaseDeposit;\\n    }\\n\\n    /// @dev Changes the time allocated for submission. Note that it can't be changed during approval period because there can be an active dispute in the old arbitrator contract\\n    /// and prolonging submission timeout might switch it back to submission period.\\n    /// @param _submissionTimeout The new duration of the submission period, in seconds.\\n    function changeSubmissionTimeout(uint256 _submissionTimeout) external onlyByGovernor duringSubmissionPeriod {\\n        submissionTimeout = _submissionTimeout;\\n    }\\n\\n    /// @dev Changes the time allocated for list's execution.\\n    /// @param _executionTimeout The new duration of the execution timeout, in seconds.\\n    function changeExecutionTimeout(uint256 _executionTimeout) external onlyByGovernor {\\n        executionTimeout = _executionTimeout;\\n    }\\n\\n    /// @dev Changes list withdrawal timeout. Note that withdrawals are only possible in the first half of the submission period.\\n    /// @param _withdrawTimeout The new duration of withdraw period, in seconds.\\n    function changeWithdrawTimeout(uint256 _withdrawTimeout) external onlyByGovernor {\\n        withdrawTimeout = _withdrawTimeout;\\n    }\\n\\n    /// @dev Changes the arbitrator of the contract. Note that it can't be changed during approval period because there can be an active dispute in the old arbitrator contract.\\n    /// @param _arbitrator The new trusted arbitrator.\\n    /// @param _arbitratorExtraData The extra data used by the new arbitrator.\\n    function changeArbitrator(\\n        IArbitratorV2 _arbitrator,\\n        bytes memory _arbitratorExtraData\\n    ) external onlyByGovernor duringSubmissionPeriod {\\n        arbitrator = _arbitrator;\\n        arbitratorExtraData = _arbitratorExtraData;\\n    }\\n\\n    /// @dev Update the dispute template data.\\n    /// @param _templateData The new dispute template data.\\n    /// @param _templateDataMappings The new dispute template data mappings.\\n    function changeDisputeTemplate(\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external onlyByGovernor {\\n        templateId = templateRegistry.setDisputeTemplate(\\\"\\\", _templateData, _templateDataMappings);\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Creates transaction list based on input parameters and submits it for potential approval and execution.\\n    /// @param _target List of addresses to call.\\n    /// @param _value List of values required for respective addresses.\\n    /// @param _data Concatenated calldata of all transactions of this list.\\n    /// @param _dataSize List of lengths in bytes required to split calldata for its respective targets.\\n    /// @param _description String in CSV format that describes list's transactions.\\n    function submitList(\\n        address[] memory _target,\\n        uint256[] memory _value,\\n        bytes memory _data,\\n        uint256[] memory _dataSize,\\n        string memory _description\\n    ) external payable duringSubmissionPeriod {\\n        require(_target.length == _value.length, \\\"Wrong input: target and value\\\");\\n        require(_target.length == _dataSize.length, \\\"Wrong input: target and datasize\\\");\\n        Session storage session = sessions[sessions.length - 1];\\n        Submission storage submission = submissions.push();\\n        submission.submitter = payable(msg.sender);\\n        // Do the assignment first to avoid creating a new variable and bypass a 'stack too deep' error.\\n        submission.deposit = submissionBaseDeposit + arbitrator.arbitrationCost(arbitratorExtraData);\\n        require(msg.value >= submission.deposit, \\\"Not enough ETH to cover deposit\\\");\\n\\n        bytes32 listHash;\\n        bytes32 currentTxHash;\\n        uint256 readingPosition;\\n        for (uint256 i = 0; i < _target.length; i++) {\\n            bytes memory readData = new bytes(_dataSize[i]);\\n            Transaction storage transaction = submission.txs.push();\\n            transaction.target = _target[i];\\n            transaction.value = _value[i];\\n            for (uint256 j = 0; j < _dataSize[i]; j++) {\\n                readData[j] = _data[readingPosition + j];\\n            }\\n            transaction.data = readData;\\n            readingPosition += _dataSize[i];\\n            currentTxHash = keccak256(abi.encodePacked(transaction.target, transaction.value, transaction.data));\\n            listHash = keccak256(abi.encodePacked(currentTxHash, listHash));\\n        }\\n        require(!session.alreadySubmitted[listHash], \\\"List already submitted\\\");\\n        session.alreadySubmitted[listHash] = true;\\n        submission.listHash = listHash;\\n        submission.submissionTime = block.timestamp;\\n        session.sumDeposit += submission.deposit;\\n        session.submittedLists.push(submissions.length - 1);\\n        if (session.submittedLists.length == 1) session.durationOffset = block.timestamp - lastApprovalTime;\\n\\n        emit ListSubmitted(submissions.length - 1, msg.sender, sessions.length - 1, _description);\\n\\n        uint256 remainder = msg.value - submission.deposit;\\n        if (remainder > 0) payable(msg.sender).send(remainder);\\n\\n        reservedETH += submission.deposit;\\n    }\\n\\n    /// @dev Withdraws submitted transaction list. Reimburses submission deposit.\\n    /// Withdrawal is only possible during the first half of the submission period and during withdrawTimeout after the submission is made.\\n    /// @param _submissionID Submission's index in the array of submitted lists of the current sesssion.\\n    /// @param _listHash Hash of a withdrawing list.\\n    function withdrawTransactionList(uint256 _submissionID, bytes32 _listHash) external {\\n        Session storage session = sessions[sessions.length - 1];\\n        Submission storage submission = submissions[session.submittedLists[_submissionID]];\\n        require(block.timestamp - lastApprovalTime <= submissionTimeout / 2, \\\"Should be in first half\\\");\\n        // This require statement is an extra check to prevent _submissionID linking to the wrong list because of index swap during withdrawal.\\n        require(submission.listHash == _listHash, \\\"Wrong list hash\\\");\\n        require(submission.submitter == msg.sender, \\\"Only submitter can withdraw\\\");\\n        require(block.timestamp - submission.submissionTime <= withdrawTimeout, \\\"Withdrawing time has passed.\\\");\\n        session.submittedLists[_submissionID] = session.submittedLists[session.submittedLists.length - 1];\\n        session.alreadySubmitted[_listHash] = false;\\n        session.submittedLists.pop();\\n        session.sumDeposit -= submission.deposit;\\n        reservedETH -= submission.deposit;\\n        payable(msg.sender).transfer(submission.deposit);\\n    }\\n\\n    /// @dev Approves a transaction list or creates a dispute if more than one list was submitted.\\n    /// If nothing was submitted changes session.\\n    function executeSubmissions() external duringApprovalPeriod {\\n        Session storage session = sessions[sessions.length - 1];\\n        require(session.status == Status.NoDispute, \\\"Already disputed\\\");\\n        if (session.submittedLists.length == 0) {\\n            lastApprovalTime = block.timestamp;\\n            session.status = Status.Resolved;\\n            sessions.push();\\n        } else if (session.submittedLists.length == 1) {\\n            Submission storage submission = submissions[session.submittedLists[0]];\\n            submission.approved = true;\\n            submission.approvalTime = block.timestamp;\\n            uint256 sumDeposit = session.sumDeposit;\\n            session.sumDeposit = 0;\\n            submission.submitter.send(sumDeposit);\\n            lastApprovalTime = block.timestamp;\\n            session.status = Status.Resolved;\\n            sessions.push();\\n\\n            reservedETH -= sumDeposit;\\n        } else {\\n            session.status = Status.DisputeCreated;\\n            uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n            session.disputeID = arbitrator.createDispute{value: arbitrationCost}(\\n                session.submittedLists.length,\\n                arbitratorExtraData\\n            );\\n            // Check in case arbitration cost increased after the submission. It's unlikely that its increase won't be covered by the base deposit, but technically possible.\\n            session.sumDeposit = session.sumDeposit > arbitrationCost ? session.sumDeposit - arbitrationCost : 0;\\n            reservedETH = reservedETH > arbitrationCost ? reservedETH - arbitrationCost : 0;\\n            emit DisputeRequest(arbitrator, session.disputeID, sessions.length - 1, templateId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Gives a ruling for a dispute. Must be called by the arbitrator.\\n    /// @param _disputeID ID of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refuse to arbitrate\\\".\\n    /// Note If the final ruling is \\\"0\\\" nothing is approved and deposits will stay locked in the contract.\\n    function rule(uint256 _disputeID, uint256 _ruling) external override {\\n        Session storage session = sessions[sessions.length - 1];\\n        require(msg.sender == address(arbitrator), \\\"Only arbitrator allowed\\\");\\n        require(session.status == Status.DisputeCreated, \\\"Wrong status\\\");\\n        require(_ruling <= session.submittedLists.length, \\\"Ruling is out of bounds.\\\");\\n\\n        if (_ruling != 0) {\\n            Submission storage submission = submissions[session.submittedLists[_ruling - 1]];\\n            submission.approved = true;\\n            submission.approvalTime = block.timestamp;\\n            submission.submitter.send(session.sumDeposit);\\n        }\\n        // If the ruling is \\\"0\\\" the reserved funds of this session become expendable.\\n        reservedETH -= session.sumDeposit;\\n\\n        session.sumDeposit = 0;\\n        lastApprovalTime = block.timestamp;\\n        session.status = Status.Resolved;\\n        session.ruling = _ruling;\\n        sessions.push();\\n\\n        emit Ruling(IArbitratorV2(msg.sender), _disputeID, _ruling);\\n    }\\n\\n    /// @dev Executes selected transactions of the list.\\n    /// @param _listID The index of the transaction list in the array of lists.\\n    /// @param _cursor Index of the transaction from which to start executing.\\n    /// @param _count Number of transactions to execute. Executes until the end if set to \\\"0\\\" or number higher than number of transactions in the list.\\n    function executeTransactionList(uint256 _listID, uint256 _cursor, uint256 _count) external {\\n        Submission storage submission = submissions[_listID];\\n        require(submission.approved, \\\"Should be approved\\\");\\n        require(block.timestamp - submission.approvalTime <= executionTimeout, \\\"Time to execute has passed\\\");\\n        for (uint256 i = _cursor; i < submission.txs.length && (_count == 0 || i < _cursor + _count); i++) {\\n            Transaction storage transaction = submission.txs[i];\\n            uint256 expendableFunds = getExpendableFunds();\\n            if (!transaction.executed && transaction.value <= expendableFunds) {\\n                (bool callResult, ) = transaction.target.call{value: transaction.value}(transaction.data);\\n                // An extra check to prevent re-entrancy through target call.\\n                if (callResult == true) {\\n                    require(!transaction.executed, \\\"Already executed\\\");\\n                    transaction.executed = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Receive function to receive funds for the execution of transactions.\\n    receive() external payable {}\\n\\n    /// @dev Gets the sum of contract funds that are used for the execution of transactions.\\n    /// @return Contract balance without reserved ETH.\\n    function getExpendableFunds() public view returns (uint256) {\\n        return address(this).balance - reservedETH;\\n    }\\n\\n    /// @dev Gets the info of the specific transaction in the specific list.\\n    /// @param _listID The index of the transaction list in the array of lists.\\n    /// @param _transactionIndex The index of the transaction.\\n    /// @return target The target of the transaction.\\n    /// @return value The value of the transaction.\\n    /// @return data The data of the transaction.\\n    /// @return executed Whether the transaction was executed or not.\\n    function getTransactionInfo(\\n        uint256 _listID,\\n        uint256 _transactionIndex\\n    ) external view returns (address target, uint256 value, bytes memory data, bool executed) {\\n        Submission storage submission = submissions[_listID];\\n        Transaction storage transaction = submission.txs[_transactionIndex];\\n        return (transaction.target, transaction.value, transaction.data, transaction.executed);\\n    }\\n\\n    /// @dev Gets the array of submitted lists in the session.\\n    /// Note that this function is O(n), where n is the number of submissions in the session. This could exceed the gas limit, therefore this function should only be used for interface display and not by other contracts.\\n    /// @param _session The ID of the session.\\n    /// @return submittedLists Indexes of lists that were submitted during the session.\\n    function getSubmittedLists(uint256 _session) external view returns (uint256[] memory submittedLists) {\\n        Session storage session = sessions[_session];\\n        submittedLists = session.submittedLists;\\n    }\\n\\n    /// @dev Gets the number of transactions in the list.\\n    /// @param _listID The index of the transaction list in the array of lists.\\n    /// @return txCount The number of transactions in the list.\\n    function getNumberOfTransactions(uint256 _listID) external view returns (uint256 txCount) {\\n        Submission storage submission = submissions[_listID];\\n        return submission.txs.length;\\n    }\\n\\n    /// @dev Gets the number of lists created in contract's lifetime.\\n    /// @return The number of created lists.\\n    function getNumberOfCreatedLists() external view returns (uint256) {\\n        return submissions.length;\\n    }\\n\\n    /// @dev Gets the number of the ongoing session.\\n    /// @return The number of the ongoing session.\\n    function getCurrentSessionNumber() external view returns (uint256) {\\n        return sessions.length - 1;\\n    }\\n}\\n\",\"keccak256\":\"0x0ade98b577bb0466dd50a868bb358dfa611de1ea49f9266549ec539e4b849801\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063a2f7b3a51461003b578063a5d4fdc31461006a575b600080fd5b61004e61004936600461017f565b61007f565b6040516001600160a01b03909116815260200160405180910390f35b61007d610078366004610257565b6100a9565b005b6000818154811061008f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008989898989898989896040516100c090610171565b6100d29998979695949392919061036c565b604051809103906000f0801580156100ee573d6000803e3d6000fd5b50600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b038416908117909155604051929350917f5425363a03f182281120f5919107c49c7a1a623acc1cbc6df468b6f0c11fcf8c9190a250505050505050505050565b612a3480620003ed83390190565b60006020828403121561019157600080fd5b5035919050565b80356001600160a01b03811681146101af57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126101db57600080fd5b813567ffffffffffffffff808211156101f6576101f66101b4565b604051601f8301601f19908116603f0116810190828211818310171561021e5761021e6101b4565b8160405283815286602085880101111561023757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060008060006101208a8c03121561027657600080fd5b61027f8a610198565b985060208a013567ffffffffffffffff8082111561029c57600080fd5b6102a88d838e016101ca565b99506102b660408d01610198565b985060608c01359150808211156102cc57600080fd5b6102d88d838e016101ca565b975060808c01359150808211156102ee57600080fd5b506102fb8c828d016101ca565b999c989b50969995989760a0870135975060c08701359660e081013596506101000135945092505050565b6000815180845260005b8181101561034c57602081850181015186830182015201610330565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038a81168252610120602083018190526000916103928483018d610326565b908b166040850152838103606085015290506103ae818a610326565b905082810360808401526103c28189610326565b9150508560a08301528460c08301528360e0830152826101008301529a995050505050505050505056fe60806040523480156200001157600080fd5b5060405162002a3438038062002a34833981016040819052620000349162000208565b600080546001600160a01b0319166001600160a01b038b1617905560016200005d898262000378565b50426008556004848155600584905560068390556007829055600b80546001018155600052600280546001600160a01b0319166001600160a01b038a169081179091556040516312a6505d60e21b81529091634a99417491620000c5918a918a910162000472565b6020604051808303816000875af1158015620000e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200010b9190620004b2565b60035550620004cc975050505050505050565b80516001600160a01b03811681146200013657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200016e57818101518382015260200162000154565b50506000910152565b600082601f8301126200018957600080fd5b81516001600160401b0380821115620001a657620001a66200013b565b604051601f8301601f19908116603f01168101908282118183101715620001d157620001d16200013b565b81604052838152866020858801011115620001eb57600080fd5b620001fe84602083016020890162000151565b9695505050505050565b60008060008060008060008060006101208a8c0312156200022857600080fd5b620002338a6200011e565b60208b01519099506001600160401b03808211156200025157600080fd5b6200025f8d838e0162000177565b99506200026f60408d016200011e565b985060608c01519150808211156200028657600080fd5b620002948d838e0162000177565b975060808c0151915080821115620002ab57600080fd5b50620002ba8c828d0162000177565b95505060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600181811c90821680620002fc57607f821691505b6020821081036200031d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000373576000816000526020600020601f850160051c810160208610156200034e5750805b601f850160051c820191505b818110156200036f578281556001016200035a565b5050505b505050565b81516001600160401b038111156200039457620003946200013b565b620003ac81620003a58454620002e7565b8462000323565b602080601f831160018114620003e45760008415620003cb5750858301515b600019600386901b1c1916600185901b1785556200036f565b600085815260208120601f198616915b828110156200041557888601518255948401946001909101908401620003f4565b5085821015620004345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081518084526200045e81602086016020860162000151565b601f01601f19169290920160200192915050565b606081526000606082015260806020820152600062000495608083018562000444565b8281036040840152620004a9818562000444565b95945050505050565b600060208284031215620004c557600080fd5b5051919050565b61255880620004dc6000396000f3fe6080604052600436106101865760003560e01c8063953d6651116100d7578063b6dc775411610085578063b6dc775414610476578063ba7079ca1461048b578063bb0b86ff146104ab578063c4bd8519146104c1578063c5d55288146104d7578063cc2bcdb4146104f7578063dc17bbdb14610517578063f730c07f1461053757600080fd5b8063953d6651146103625780639c15d1a214610382578063a0af81f014610398578063a3c595c9146103b8578063ad73349e146103e8578063b512570014610441578063b6cd08c61461045657600080fd5b80636c0b7e71116101345780636c0b7e71146102835780636cc6cde1146102985780636cf39c2b146102d057806377b9fda8146102f05780637aa77f291461030657806383c4b7a31461031c5780639244c7041461034d57600080fd5b80630c7ac7b61461019257806321cea538146101bd57806322b52d66146101ea578063246c76df1461020e57806324baacc714610230578063311a6c5614610250578063460478381461027057600080fd5b3661018d57005b600080fd5b34801561019e57600080fd5b506101a761054d565b6040516101b49190611c77565b60405180910390f35b3480156101c957600080fd5b506101dd6101d8366004611c91565b6105db565b6040516101b49190611caa565b3480156101f657600080fd5b5061020060065481565b6040519081526020016101b4565b34801561021a57600080fd5b5061022e610229366004611c91565b61065d565b005b34801561023c57600080fd5b5061022e61024b366004611c91565b61068a565b34801561025c57600080fd5b5061022e61026b366004611cee565b6106ae565b61022e61027e366004611ed7565b6108f9565b34801561028f57600080fd5b50610200610f08565b3480156102a457600080fd5b506000546102b8906001600160a01b031681565b6040516001600160a01b0390911681526020016101b4565b3480156102dc57600080fd5b5061022e6102eb366004611fa8565b610f1f565b3480156102fc57600080fd5b5061020060095481565b34801561031257600080fd5b5061020060035481565b34801561032857600080fd5b5061033c610337366004611c91565b61115a565b6040516101b4959493929190611fea565b34801561035957600080fd5b5061022e6111a1565b34801561036e57600080fd5b5061022e61037d366004611c91565b611599565b34801561038e57600080fd5b5061020060075481565b3480156103a457600080fd5b506002546102b8906001600160a01b031681565b3480156103c457600080fd5b506103d86103d3366004611cee565b61162f565b6040516101b49493929190612030565b3480156103f457600080fd5b50610408610403366004611c91565b611749565b604080516001600160a01b03909716875260208701959095529385019290925260608401521515608083015260a082015260c0016101b4565b34801561044d57600080fd5b5061020061179f565b34801561046257600080fd5b5061022e610471366004611cee565b6117af565b34801561048257600080fd5b50600a54610200565b34801561049757600080fd5b5061022e6104a636600461206a565b611a84565b3480156104b757600080fd5b5061020060045481565b3480156104cd57600080fd5b5061020060055481565b3480156104e357600080fd5b5061022e6104f23660046120b9565b611b41565b34801561050357600080fd5b5061022e610512366004611c91565b611bdc565b34801561052357600080fd5b50610200610532366004611c91565b611c00565b34801561054357600080fd5b5061020060085481565b6001805461055a90612112565b80601f016020809104026020016040519081016040528092919081815260200182805461058690612112565b80156105d35780601f106105a8576101008083540402835291602001916105d3565b820191906000526020600020905b8154815290600101906020018083116105b657829003601f168201915b505050505081565b60606000600b83815481106105f2576105f261214c565b906000526020600020906007020190508060020180548060200260200160405190810160405280929190818152602001828054801561065057602002820191906000526020600020905b81548152602001906001019080831161063c575b5050505050915050919050565b3033146106855760405162461bcd60e51b815260040161067c90612162565b60405180910390fd5b600755565b3033146106a95760405162461bcd60e51b815260040161067c90612162565b600455565b600b8054600091906106c2906001906121af565b815481106106d2576106d261214c565b600091825260208220915460079190910290910191506001600160a01b031633146107395760405162461bcd60e51b815260206004820152601760248201527613db9b1e48185c989a5d1c985d1bdc88185b1b1bddd959604a1b604482015260640161067c565b6001600482015460ff16600281111561075457610754611fd4565b146107905760405162461bcd60e51b815260206004820152600c60248201526b57726f6e672073746174757360a01b604482015260640161067c565b60028101548211156107df5760405162461bcd60e51b8152602060048201526018602482015277293ab634b7339034b99037baba1037b3103137bab732399760411b604482015260640161067c565b8115610877576000600a600283016107f86001866121af565b815481106108085761080861214c565b9060005260206000200154815481106108235761082361214c565b6000918252602082206005600790920201908101805460ff19166001179055426006820155805460038501546040519294506001600160a01b039091169281156108fc029290818181858888f15050505050505b80600301546009600082825461088d91906121af565b90915550506000600382018190554260085560048201805460ff19166002179055828255600b805460010181559052604051828152839033907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e75622276906020015b60405180910390a3505050565b600b80546000919061090d906001906121af565b8154811061091d5761091d61214c565b90600052602060002090600702016006015490508060055461093f91906121c8565b60085461094c90426121af565b111561096a5760405162461bcd60e51b815260040161067c906121db565b84518651146109bb5760405162461bcd60e51b815260206004820152601d60248201527f57726f6e6720696e7075743a2074617267657420616e642076616c7565000000604482015260640161067c565b8251865114610a0c5760405162461bcd60e51b815260206004820181905260248201527f57726f6e6720696e7075743a2074617267657420616e64206461746173697a65604482015260640161067c565b600b805460009190610a20906001906121af565b81548110610a3057610a3061214c565b600091825260208220600a80546001818101835591855260079081027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b03191633178155945460405163f7434ea960e01b81529190940290920194506001600160a01b03929092169163f7434ea991610ab6919060040161228f565b602060405180830381865afa158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af791906122a2565b600454610b0491906121c8565b60018201819055341015610b5a5760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f7567682045544820746f20636f766572206465706f73697400604482015260640161067c565b60008080805b8b51811015610d66576000898281518110610b7d57610b7d61214c565b60200260200101516001600160401b03811115610b9c57610b9c611d10565b6040519080825280601f01601f191660200182016040528015610bc6576020820181803683370190505b50600287018054600181018255600091825260209091208f51929350600490910201908e9084908110610bfb57610bfb61214c565b602090810291909101015181546001600160a01b0319166001600160a01b039091161781558c518d9084908110610c3457610c3461214c565b6020026020010151816001018190555060005b8b8481518110610c5957610c5961214c565b6020026020010151811015610cbf578c610c7382876121c8565b81518110610c8357610c8361214c565b602001015160f81c60f81b838281518110610ca057610ca061214c565b60200101906001600160f81b031916908160001a905350600101610c47565b5060028101610cce838261230c565b508a8381518110610ce157610ce161214c565b602002602001015184610cf491906121c8565b81546001830154604051929650610d1e926001600160a01b0390921691600285019060200161243e565b60408051601f19818403018152828252805160209182012081840181905283830199909952815180840383018152606090930190915281519101209594505050600101610b60565b50600083815260058601602052604090205460ff1615610dc15760405162461bcd60e51b8152602060048201526016602482015275131a5cdd08185b1c9958591e481cdd589b5a5d1d195960521b604482015260640161067c565b60008381526005860160205260408120805460ff19166001908117909155600380870186905542600488015590860154908701805491929091610e059084906121c8565b9091555050600a546002860190610e1e906001906121af565b81546001818101845560009384526020909320015560028601549003610e5157600854610e4b90426121af565b60068601555b600b54610e60906001906121af565b600a543390610e71906001906121af565b7f1a700b4f7df255aaf8c91c8b05abf0eab596e467dc17ef76fe4afc12541012488a604051610ea09190611c77565b60405180910390a46000846001015434610eba91906121af565b90508015610edf57604051339082156108fc029083906000818181858888f150505050505b846001015460096000828254610ef591906121c8565b9091555050505050505050505050505050565b600b54600090610f1a906001906121af565b905090565b6000600a8481548110610f3457610f3461214c565b60009182526020909120600790910201600581015490915060ff16610f905760405162461bcd60e51b815260206004820152601260248201527114da1bdd5b1908189948185c1c1c9bdd995960721b604482015260640161067c565b600654816006015442610fa391906121af565b1115610ff15760405162461bcd60e51b815260206004820152601a60248201527f54696d6520746f20657865637574652068617320706173736564000000000000604482015260640161067c565b825b6002820154811080156110165750821580611016575061101383856121c8565b81105b156111535760008260020182815481106110325761103261214c565b90600052602060002090600402019050600061104c61179f565b600383015490915060ff16158015611068575080826001015411155b1561113e57815460018301546040516000926001600160a01b03169190611093906002870190612471565b60006040518083038185875af1925050503d80600081146110d0576040519150601f19603f3d011682016040523d82523d6000602084013e6110d5565b606091505b509091505080151560010361113c57600383015460ff161561112c5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015260640161067c565b60038301805460ff191660011790555b505b5050808061114b9061247d565b915050610ff3565b5050505050565b600b818154811061116a57600080fd5b6000918252602090912060079091020180546001820154600383015460048401546006909401549294509092909160ff9091169085565b600b8054600091906111b5906001906121af565b815481106111c5576111c561214c565b9060005260206000209060070201600601549050806005546111e791906121c8565b6008546111f490426121af565b116112415760405162461bcd60e51b815260206004820152601e60248201527f417070726f76616c2074696d65206e6f742073746172746564207965742e0000604482015260640161067c565b600b805460009190611255906001906121af565b815481106112655761126561214c565b6000918252602082206007909102019150600482015460ff16600281111561128f5761128f611fd4565b146112cf5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48191a5cdc1d5d195960821b604482015260640161067c565b60028101546000036112fc5742600855600401805460ff1916600217905550600b80546001018155600052565b60028101546001036113d8576000600a826002016000815481106113225761132261214c565b90600052602060002001548154811061133d5761133d61214c565b6000918252602082206005600790920201908101805460ff1916600117905542600682015560038401805490839055815460405192945090926001600160a01b039091169183156108fc0291849190818181858888f150504260085550505060048301805460ff19166002179055600b805460010181556000908152600980548392906113cb9084906121af565b9091555061159592505050565b6004818101805460ff191660019081179091556000805460405163f7434ea960e01b815291936001600160a01b039091169263f7434ea99261141a920161228f565b602060405180830381865afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b91906122a2565b600054600284015460405163c13517e160e01b81529293506001600160a01b039091169163c13517e19184916114979190600190600401612496565b60206040518083038185885af11580156114b5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906114da91906122a2565b6001830155600382015481106114f1576000611501565b80826003015461150191906121af565b60038301556009548110611516576000611524565b8060095461152491906121af565b600955600180830154600054600b5491926001600160a01b03909116917f8bd32f430ff060e6bd204709b3790c9807987263d3230c580dc80b5f89e271869161156c916121af565b6003546040516108ec929190918252602082015260606040820181905260009082015260800190565b5050565b3033146115b85760405162461bcd60e51b815260040161067c90612162565b600b8054600091906115cc906001906121af565b815481106115dc576115dc61214c565b9060005260206000209060070201600601549050806005546115fe91906121c8565b60085461160b90426121af565b11156116295760405162461bcd60e51b815260040161067c906121db565b50600555565b6000806060600080600a878154811061164a5761164a61214c565b9060005260206000209060070201905060008160020187815481106116715761167161214c565b600091825260209091206004909102018054600182015460038301546002840180549495506001600160a01b039093169391929160ff9091169082906116b690612112565b80601f01602080910402602001604051908101604052809291908181526020018280546116e290612112565b801561172f5780601f106117045761010080835404028352916020019161172f565b820191906000526020600020905b81548152906001019060200180831161171257829003601f168201915b505050505091509550955095509550505092959194509250565b600a818154811061175957600080fd5b60009182526020909120600790910201805460018201546003830154600484015460058501546006909501546001600160a01b0390941695509193909260ff9091169086565b600060095447610f1a91906121af565b600b8054600091906117c3906001906121af565b815481106117d3576117d361214c565b906000526020600020906007020190506000600a8260020185815481106117fc576117fc61214c565b9060005260206000200154815481106118175761181761214c565b90600052602060002090600702019050600260055461183691906124b7565b60085461184390426121af565b111561188b5760405162461bcd60e51b815260206004820152601760248201527629b437bab6321031329034b7103334b939ba103430b63360491b604482015260640161067c565b828160030154146118d05760405162461bcd60e51b815260206004820152600f60248201526e0aee4dedcce40d8d2e6e840d0c2e6d608b1b604482015260640161067c565b80546001600160a01b031633146119295760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79207375626d69747465722063616e2077697468647261770000000000604482015260640161067c565b600754600482015461193b90426121af565b11156119895760405162461bcd60e51b815260206004820152601c60248201527f5769746864726177696e672074696d6520686173207061737365642e00000000604482015260640161067c565b60028201805461199b906001906121af565b815481106119ab576119ab61214c565b90600052602060002001548260020185815481106119cb576119cb61214c565b60009182526020808320909101929092558481526005840190915260409020805460ff1916905560028201805480611a0557611a056124d9565b600190038181906000526020600020016000905590558060010154826003016000828254611a3391906121af565b9091555050600181015460098054600090611a4f9084906121af565b90915550506001810154604051339180156108fc02916000818181858888f19350505050158015611153573d6000803e3d6000fd5b303314611aa35760405162461bcd60e51b815260040161067c90612162565b600b805460009190611ab7906001906121af565b81548110611ac757611ac761214c565b906000526020600020906007020160060154905080600554611ae991906121c8565b600854611af690426121af565b1115611b145760405162461bcd60e51b815260040161067c906121db565b600080546001600160a01b0319166001600160a01b0385161790556001611b3b838261230c565b50505050565b303314611b605760405162461bcd60e51b815260040161067c90612162565b6002546040516312a6505d60e21b81526001600160a01b0390911690634a99417490611b9290859085906004016124ef565b6020604051808303816000875af1158015611bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd591906122a2565b6003555050565b303314611bfb5760405162461bcd60e51b815260040161067c90612162565b600655565b600080600a8381548110611c1657611c1661214c565b60009182526020909120600260079092020101549392505050565b6000815180845260005b81811015611c5757602081850181015186830182015201611c3b565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611c8a6020830184611c31565b9392505050565b600060208284031215611ca357600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611ce257835183529284019291840191600101611cc6565b50909695505050505050565b60008060408385031215611d0157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611d4e57611d4e611d10565b604052919050565b60006001600160401b03821115611d6f57611d6f611d10565b5060051b60200190565b6001600160a01b0381168114611d8e57600080fd5b50565b600082601f830112611da257600080fd5b81356020611db7611db283611d56565b611d26565b8083825260208201915060208460051b870101935086841115611dd957600080fd5b602086015b84811015611dfe578035611df181611d79565b8352918301918301611dde565b509695505050505050565b600082601f830112611e1a57600080fd5b81356020611e2a611db283611d56565b8083825260208201915060208460051b870101935086841115611e4c57600080fd5b602086015b84811015611dfe5780358352918301918301611e51565b600082601f830112611e7957600080fd5b81356001600160401b03811115611e9257611e92611d10565b611ea5601f8201601f1916602001611d26565b818152846020838601011115611eba57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611eef57600080fd5b85356001600160401b0380821115611f0657600080fd5b611f1289838a01611d91565b96506020880135915080821115611f2857600080fd5b611f3489838a01611e09565b95506040880135915080821115611f4a57600080fd5b611f5689838a01611e68565b94506060880135915080821115611f6c57600080fd5b611f7889838a01611e09565b93506080880135915080821115611f8e57600080fd5b50611f9b88828901611e68565b9150509295509295909350565b600080600060608486031215611fbd57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052602160045260246000fd5b858152602081018590526040810184905260a081016003841061201d57634e487b7160e01b600052602160045260246000fd5b6060820193909352608001529392505050565b60018060a01b03851681528360208201526080604082015260006120576080830185611c31565b9050821515606083015295945050505050565b6000806040838503121561207d57600080fd5b823561208881611d79565b915060208301356001600160401b038111156120a357600080fd5b6120af85828601611e68565b9150509250929050565b600080604083850312156120cc57600080fd5b82356001600160401b03808211156120e357600080fd5b6120ef86838701611e68565b9350602085013591508082111561210557600080fd5b506120af85828601611e68565b600181811c9082168061212657607f821691505b60208210810361214657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6020808252601a908201527f4f6e6c792074686520676f7665726e6f7220616c6c6f7765642e000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156121c2576121c2612199565b92915050565b808201808211156121c2576121c2612199565b6020808252601a908201527f5375626d697373696f6e2074696d652068617320656e6465642e000000000000604082015260600190565b6000815461221f81612112565b80855260206001838116801561223c576001811461225657612284565b60ff1985168884015283151560051b880183019550612284565b866000528260002060005b8581101561227c5781548a8201860152908301908401612261565b890184019650505b505050505092915050565b602081526000611c8a6020830184612212565b6000602082840312156122b457600080fd5b5051919050565b601f821115612307576000816000526020600020601f850160051c810160208610156122e45750805b601f850160051c820191505b81811015612303578281556001016122f0565b5050505b505050565b81516001600160401b0381111561232557612325611d10565b612339816123338454612112565b846122bb565b602080601f83116001811461236e57600084156123565750858301515b600019600386901b1c1916600185901b178555612303565b600085815260208120601f198616915b8281101561239d5788860151825594840194600190910190840161237e565b50858210156123bb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081546123d881612112565b600182811680156123f0576001811461240557612434565b60ff1984168752821515830287019450612434565b8560005260208060002060005b8581101561242b5781548a820152908401908201612412565b50505082870194505b5050505092915050565b6bffffffffffffffffffffffff198460601b168152826014820152600061246860348301846123cb565b95945050505050565b6000611c8a82846123cb565b60006001820161248f5761248f612199565b5060010190565b8281526040602082015260006124af6040830184612212565b949350505050565b6000826124d457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b60608152600060608201526080602082015260006125106080830185611c31565b82810360408401526124688185611c3156fea2646970667358221220b3165ef80caf5e476954a3bd1c1e5aeae6107cfd44501363f03cb5b50f8ff27664736f6c63430008180033a264697066735822122070f59422433473f1dc62ab22b48cae0e08bde2a68b9314956b514f7b6297342e64736f6c63430008180033",
  "devdoc": {
    "events": {
      "NewGovernor(address)": {
        "details": "Emitted when a new Governor contract is deployed using this factory.",
        "params": {
          "_address": "The address of the newly deployed Governor contract."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "deploy(address,bytes,address,string,string,uint256,uint256,uint256,uint256)": {
        "details": "Deploy the arbitrable kleros.",
        "params": {
          "_arbitrator": "The arbitrator of the contract.",
          "_arbitratorExtraData": "Extra data for the arbitrator.",
          "_executionTimeout": "Time in seconds after approval that allows to execute transactions of the approved list.",
          "_submissionBaseDeposit": "The base deposit required for submission.",
          "_submissionTimeout": "Time in seconds allocated for submitting transaction list.",
          "_templateData": "The dispute template data.",
          "_templateDataMappings": "The dispute template data mappings.",
          "_templateRegistry": "Dispute Template registry address",
          "_withdrawTimeout": "Time in seconds after submission that allows to withdraw submitted list."
        }
      }
    },
    "title": "GovernorFactory This contract acts as a registry for KlerosGovernor instances.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 256,
        "contract": "src/GovernorFactory.sol:GovernorFactory",
        "label": "instances",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(KlerosGovernor)1627)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(KlerosGovernor)1627)dyn_storage": {
        "base": "t_contract(KlerosGovernor)1627",
        "encoding": "dynamic_array",
        "label": "contract KlerosGovernor[]",
        "numberOfBytes": "32"
      },
      "t_contract(KlerosGovernor)1627": {
        "encoding": "inplace",
        "label": "contract KlerosGovernor",
        "numberOfBytes": "20"
      }
    }
  }
}